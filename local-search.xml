<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1. 栈与队列的应用</title>
    <link href="/2024/10/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2024/10/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-使用栈与队列的思想实现一个简易的计算器"><a href="#1-使用栈与队列的思想实现一个简易的计算器" class="headerlink" title="1 使用栈与队列的思想实现一个简易的计算器"></a>1 使用栈与队列的思想实现一个简易的计算器</h1><p>实现功能：读入一个只含有+,-,*,&#x2F;的非负整数计算表达式子，计算该表达式的值。</p><p>输入：30&#x2F;90-26+97-5-6-13&#x2F;88<em>6+51&#x2F;29+79</em>87+57*92 输出：12175.21</p><p>思路：中缀转后缀表达式，再用栈与队列的思维计算后缀表达式</p><p>C++代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span><span class="hljs-comment">//导入栈容器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span><span class="hljs-comment">//导入队列容器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span><span class="hljs-comment">//导入图容器</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">double</span> num; <span class="hljs-comment">//操作数</span><br>    <span class="hljs-type">char</span> op; <span class="hljs-comment">//操作符</span><br>    <span class="hljs-type">bool</span> flag;  <span class="hljs-comment">//true表示操作数，false表示操作符</span><br>&#125;;<br><br>string str;<br>stack &lt;node&gt; s; <span class="hljs-comment">//操作字符栈</span><br>queue &lt;node&gt; q; <span class="hljs-comment">//后缀表达式序列</span><br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; op;  <span class="hljs-comment">//操作符优先级的映射</span><br><span class="hljs-comment">//op以键值对的形式存储数据,每个映射的键的类型为字符(char)，值的类型为整数(int)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Change</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">//将中缀表达式转换成后缀表达式</span><br><span class="hljs-type">double</span> num;<br>node temp;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">length</span>(); )&#123;<br><span class="hljs-keyword">if</span>(str[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)&#123;<span class="hljs-comment">//如果是数字 </span><br>temp.flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">//标记是数字</span><br>temp.num = str[i++] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//记录这个操作数的第一个数位</span><br><span class="hljs-keyword">while</span>(i &lt; str.<span class="hljs-built_in">length</span>() &amp;&amp; str[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>temp.num = temp.num * <span class="hljs-number">10</span> + (str[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<span class="hljs-comment">//更新这个操作数</span><br>i++; <br>&#125;  <br>q.<span class="hljs-built_in">push</span>(temp);<span class="hljs-comment">//将操作数压入后缀表达式的队列 </span><br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果是操作符 </span><br>temp.flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记是操作符</span><br><span class="hljs-comment">//只要操作符栈的栈顶元素比该操作符优先级高</span><br><span class="hljs-comment">//就把操作符栈栈顶元素弹出到后缀表达式队列中</span><br><span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>() &amp;&amp; op[str[i]] &lt;= op[s.<span class="hljs-built_in">top</span>().op])&#123;<br>q.<span class="hljs-built_in">push</span>(s.<span class="hljs-built_in">top</span>());<br>s.<span class="hljs-built_in">pop</span>();<br>&#125; <br>temp.op = str[i];<br>s.<span class="hljs-built_in">push</span>(temp);<span class="hljs-comment">//把该操作符压入操作符栈中</span><br>i++; <br>&#125; <br>&#125;<br><span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())&#123;<br>q.<span class="hljs-built_in">push</span>(s.<span class="hljs-built_in">top</span>());<br>s.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Cal</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//计算后缀表达式</span><br><span class="hljs-type">double</span> temp1, temp2;<br>node cur, temp;<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()) &#123;<span class="hljs-comment">//只要后缀表达式队列非空 </span><br>cur = q.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//cur记录队首元素 </span><br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(cur.flag == <span class="hljs-literal">true</span>) s.<span class="hljs-built_in">push</span>(cur);<span class="hljs-comment">//如果是操作数直接压入栈</span><br><span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果是操作符</span><br>temp2 = s.<span class="hljs-built_in">top</span>().num; <span class="hljs-comment">//弹出第二操作数</span><br>s.<span class="hljs-built_in">pop</span>();<br>temp1 = s.<span class="hljs-built_in">top</span>().num;<span class="hljs-comment">//弹出第一操作数</span><br>s.<span class="hljs-built_in">pop</span>(); <br>temp.flag = <span class="hljs-literal">true</span>;<span class="hljs-comment">//临时记录操作数</span><br><span class="hljs-keyword">if</span>(cur.op == <span class="hljs-string">&#x27;+&#x27;</span>) temp.num = temp1 + temp2;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur.op == <span class="hljs-string">&#x27;-&#x27;</span>) temp.num = temp1 - temp2;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur.op == <span class="hljs-string">&#x27;*&#x27;</span>) temp.num = temp1 * temp2;<br><span class="hljs-keyword">else</span> temp.num = temp1 / temp2;<br>s.<span class="hljs-built_in">push</span>(temp);<span class="hljs-comment">//把计算结果数压入栈 </span><br>&#125; <br>&#125;<br><span class="hljs-keyword">return</span> s.<span class="hljs-built_in">top</span>().num;<span class="hljs-comment">//栈顶元素就是最后表达式的值 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>op[<span class="hljs-string">&#x27;+&#x27;</span>] = op[<span class="hljs-string">&#x27;-&#x27;</span>] = <span class="hljs-number">1</span>;<br>op[<span class="hljs-string">&#x27;*&#x27;</span>] = op[<span class="hljs-string">&#x27;/&#x27;</span>] = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">getline</span>(cin, str), str != <span class="hljs-string">&quot;0&quot;</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = str.<span class="hljs-built_in">end</span>(); it != str.<span class="hljs-built_in">begin</span>(); it--)&#123;<br><span class="hljs-keyword">if</span>(*it == <span class="hljs-string">&#x27; &#x27;</span>) str.<span class="hljs-built_in">erase</span>(it);<span class="hljs-comment">//把表达式中的所有空格全部去掉 </span><br>&#125;<br><span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>()) s.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//初始化栈</span><br><span class="hljs-built_in">Change</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>, <span class="hljs-built_in">Cal</span>()); <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈与队列的应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;Java&gt;2 变量</title>
    <link href="/2024/06/18/Java-%E5%8F%98%E9%87%8F/"/>
    <url>/2024/06/18/Java-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><blockquote><p>变量：变量是程序的基本组成单位</p></blockquote><blockquote><p>变量的三个基本要素：类型 + 名称 + 值</p></blockquote><blockquote><p>示例：int a &#x3D; 1 类型 int 名称 a 值 1</p></blockquote><p><strong>如何声明变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a;<br>a = <span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>, d;<br></code></pre></td></tr></table></figure><h2 id="2-1-变量使用注意事项"><a href="#2-1-变量使用注意事项" class="headerlink" title="2.1 变量使用注意事项"></a>2.1 变量使用注意事项</h2><ol><li>变量表示内存中的一个存储区域。不同变量，不同类型，占用的空间大小不同。如 int有 4 byte，而 dobule 有 8 byte。</li><li>该区域有自己的名称 变量名 和类型 数据类型 </li><li>变量必须先声明，后使用。</li><li>变量在同一作用域内不能重名。</li><li>该区域的数据 · 值可以在同一类型范围内变化。</li><li>变量的三个基本要素：类型 + 名称 + 值</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>&lt;Java&gt;1 概述</title>
    <link href="/2024/06/18/Java%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/06/18/Java%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1 Java概述"></a>1 Java概述</h1><p>程序：一系列有序指令的集合</p><h2 id="1-1-Java历史"><a href="#1-1-Java历史" class="headerlink" title="1.1 Java历史"></a>1.1 Java历史</h2><ul><li><p>目前 Java 版权属于甲骨文公司。</p></li><li><p>长期支持的版本只有 Java8 与 Java11。这两个版本也是最多使用的版本。</p></li><li><p>Java SE：标准版</p><p>Java EE：企业版（重要）</p><p>Java ME：小型版（少）</p></li></ul><h2 id="1-2-Java重要特点"><a href="#1-2-Java重要特点" class="headerlink" title="1.2 Java重要特点"></a>1.2 Java重要特点</h2><ol><li><p>Java 语言是<strong>面向对象</strong>的（oop）</p><p>简单来说，面向对象是一种程序设计技术。其重点放在数据（对象）和对象的接口上。</p></li><li><p>Java 语言是<strong>健壮</strong>的。其强类型机制、异常处理、垃圾自动收集是健壮性的保证。</p><p>Java 强调早期问题检测、后期动态检测，及消除易出错的情况。其编译器能检测很多其他语言仅在运行时才会发现的问题。</p></li><li><p>Java 语言是<strong>跨平台性</strong>的：一个编译好的 .class 文件可以在多个不同系统下直接运行。</p><p>Java 中没有 “依赖具体实现” 的地方。其基本数据类型大小、有关运算的行为等都有明确说明。其绝大多数库都能很好地支持平台独立性，而不用担心操作系统。</p></li><li><p>Java 语言是<strong>解释型</strong>的：解释型语言编译后需要解释器才能运行。相对的，编译型语言可以被直接执行。</p><p>Java 解释器能在任何移植了解释器的机器上直接执行 Java 字节码</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java概述</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客基本操作</title>
    <link href="/2024/01/07/%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/01/07/%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="我的博客文章编写"><a href="#我的博客文章编写" class="headerlink" title="我的博客文章编写"></a>我的博客文章编写</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>使用标题时需要使用 # </p><h2 id="2-段落"><a href="#2-段落" class="headerlink" title="2. 段落"></a>2. 段落</h2><p>这是第一个段落</p><p>这是第二个段落</p><h2 id="3-区块引用"><a href="#3-区块引用" class="headerlink" title="3. 区块引用"></a>3. 区块引用</h2><blockquote><p>这是一段引用段落，将会高亮显示<br>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="4-超链接"><a href="#4-超链接" class="headerlink" title="4. 超链接"></a>4. 超链接</h2><h3 id="4-1-使用方法1"><a href="#4-1-使用方法1" class="headerlink" title="4.1 使用方法1"></a>4.1 使用方法1</h3><p>[谷歌]<a href="https://www.google.com/">https://www.google.com/</a><br>[百度]<a href="https://www.baidu.com/">https://www.baidu.com/</a>  </p><h3 id="4-2-使用方法2"><a href="#4-2-使用方法2" class="headerlink" title="4.2 使用方法2"></a>4.2 使用方法2</h3><p><a href="https://github.com/">GitHub</a><br><a href="https://blog.csdn.net/">CSDN</a></p><h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5. 图片"></a>5. 图片</h2><p><img src="https://pbs.twimg.com/media/Fvjg4CeaQAApD3h?format=jpg&name=large" alt="白瀬咲耶">  </p><h2 id="6-无序列表"><a href="#6-无序列表" class="headerlink" title="6. 无序列表"></a>6. 无序列表</h2><p>一般使用·来标识无序列表<br>单级列表从最左开始  </p><ul><li>无序列表项1  <ul><li>第二层无序列表项1</li><li>第二层无序列表项2</li></ul></li></ul><ul><li>无序列表项2</li></ul><ul><li>无序列表项3</li></ul><h2 id="7-有序列表"><a href="#7-有序列表" class="headerlink" title="7. 有序列表"></a>7. 有序列表</h2><ol><li>有序列表1  </li><li>有序列表2</li><li>有序列表3</li></ol><h2 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8. 分割线"></a>8. 分割线</h2><hr><hr><h2 id="9-字体"><a href="#9-字体" class="headerlink" title="9. 字体"></a>9. 字体</h2><p><em>这里包含斜体内容</em><br><strong>这里是加粗内容</strong>  </p><h2 id="10-表格"><a href="#10-表格" class="headerlink" title="10. 表格"></a>10. 表格</h2><table><thead><tr><th>表头1</th><th align="left">表头2</th><th align="center">表头3</th><th align="right">表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr><tr><td>默认左对齐</td><td align="left">左对齐</td><td align="center">居中对其</td><td align="right">右对齐</td></tr></tbody></table><table><thead><tr><th>表头1</th><th>表头2</th><th>表头3</th><th>表头4</th></tr></thead><tbody><tr><td>默认左对齐</td><td>左对齐</td><td>居中对其</td><td>右对齐</td></tr><tr><td>默认左对齐</td><td>左对齐</td><td>居中对其</td><td>右对齐</td></tr><tr><td>默认左对齐</td><td>左对齐</td><td>居中对其</td><td>右对齐</td></tr></tbody></table><h2 id="11-拓展语法"><a href="#11-拓展语法" class="headerlink" title="11. 拓展语法"></a>11. 拓展语法</h2><h3 id="11-1-代码块"><a href="#11-1-代码块" class="headerlink" title="11.1 代码块"></a>11.1 代码块</h3><p>在代码块的前后各添加三个反引号(&#96;&#96;&#96;)，形成围栏代码块；在受防护的代码块之前的反引号旁边指定一种语言。<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>&amp;emsp;&amp;emsp;cout &lt;&lt; <span class="hljs-string">&quot;hello world!&quot;</span> &lt;&lt; endl;<br>&amp;emsp;&amp;emsp;retrun <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="11-1-1-常用的代码块语言"><a href="#11-1-1-常用的代码块语言" class="headerlink" title="11.1.1 常用的代码块语言"></a>11.1.1 常用的代码块语言</h4><ul><li>Javascript：js</li><li>C：c</li><li>C++：cpp</li><li>Python：python</li><li>HTML：html</li><li>Bash：bash</li><li>Shell：shell</li><li>PowerShell：ps</li><li>JSON：json</li></ul><h3 id="11-2-删除线"><a href="#11-2-删除线" class="headerlink" title="11.2 删除线"></a>11.2 删除线</h3><p><del>文本</del></p><h3 id="11-3-任务列表"><a href="#11-3-任务列表" class="headerlink" title="11.3 任务列表"></a>11.3 任务列表</h3><ul><li><input checked="" disabled="" type="checkbox"> The first element</li><li><input disabled="" type="checkbox"> The second element</li><li><input disabled="" type="checkbox"> The third element</li></ul><h3 id="11-4-脚注"><a href="#11-4-脚注" class="headerlink" title="11.4 脚注"></a>11.4 脚注</h3><p>Here’s a sentence with a footnote. <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="This is the footnote.">[1]</span></a></sup>  </p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>This is the footnote.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
